#!/bin/bash

source $(dirname $BASH_SOURCE)/vtcommon

need_root

#saves current directory
save_pwd
cd /boot || exit

# choosing kelner version
get_kver ${1}

#checking presence of the kelner

if [ ! -e "Image-${kver}" ]; then
  echo "Image-${kver} seams to be missing"
  echo "this kelner version doesn't seam to be present"
  exit 1
fi

#it is better to regenerate initramfs everytime
if [ ! -e initrd.img-${kver} ] || [ "$2" != "noinitgen" ]; then
  
  touch /boot/norebuild #prevents initramfs from running vtbuild again

  if [ ! -e initrd.img-${kver} ] && [ "$2" == "noinitgen" ]; then
    echo "sorry but there is no initramft to use ;-;, i have to build one, want to continue"
    need_confirmation
  fi

  echo "initrd.img-${kver} seams to be missing, trying to generate"
  update-initramfs -c -k "${kver}"

  rm /boot/norebuild 2> /dev/null
fi

if [ ! -e "initrd.img-${kver}" ]; then
  echo "sorry. unable to generate initramfs TwT"
  exit 1
fi

if [ ! -e cmdline ]; then
  echo "cmdline seams to be missing"
  echo "Note. will create one for you"
  # -n prevents echo from adding new line at the end
  echo -n "console=tty1 root=LABEL=rootemmc rootwait ro fsck.fix=yes fsck.repair=yes net.ifnames=0 ipv6.disable=1 quiet splash" > cmdline
  
  #cbq requires additional cmdline
  if echo "$kver" | grep -q "cbq"; then
    echo "there is cbq"
    echo -n " deferred_probe_timeout=30 clk_ignore_unused=1" >> cmdline
  fi


  cat cmdline

fi

#generating required files
cp -v "vmlinux.kpart-initrd-${kver}" "vmlinux.kpart-initrd-${kver}.old" 2> /dev/null || out_of_memory
cp "Image-${kver}" Image || out_of_memory
lzma -9 -z -f -k -v Image || out_of_memory
cp "initrd.img-${kver}" initrd.img.xz || out_of_memory

#moved cmdline to seperate file to make it cleaner to edit
# for cbq add: deferred_probe_timeout=30 clk_ignore_unused=1
#echo "console=tty1 root=LABEL=rootemmc rootwait ro fsck.fix=yes fsck.repair=yes net.ifnames=0 quiet splash" > cmdline

dd if=/dev/zero of=bootloader.bin bs=512 count=1 || out_of_memory

# adjust to dtb names here:
# - cbg: dtb-${kver}/rk3399-gru-*.dtb
# - mt7: dtb-${kver}/mt8173-*.dtb
# - mt8: dtb-${kver}/mt8183-*.dtb
# - cbq: dtb-${kver}/sc7180-trogdor-*.dtb
# - generic: dtb-${kver}/*.dtb
#Note. if you have this script installed instead of modifying
#it here you can specify dtbs for your system inside /boot/dtbs (file, not folder) 
#like "sc7180-trogdor-*.dtb" or "sc7180-trogdor-r1.dtb" or "sc7180-trogdor-r1.dtb sc7180-trogdor-r1-lte.dtb"
#btw. each dtb seams to add more or less 0.09 MiB
#all available dtb's are located ad /boot/dtb-<version>
#you can try to deduce dtb files for your system by running "vthelp dtbs"

if [ ! -e "dtbs" ]; then
  ls dtb-${kver}/*.dtb | xargs printf " -b %s" | xargs mkimage -D "-I dts -O dtb -p 2048" -f auto -A arm64 -O linux -T kernel -C lzma -a 0 -d Image.lzma -i initrd.img.xz kernel.itb || out_of_memory
else
  echo "the dtbs picked :"
  ls dtb-${kver}/$(cat dtbs)
  ls dtb-${kver}/$(cat dtbs) | xargs printf " -b %s" | xargs mkimage -D "-I dts -O dtb -p 2048" -f auto -A arm64 -O linux -T kernel -C lzma -a 0 -d Image.lzma -i initrd.img.xz kernel.itb || out_of_memory
fi

vbutil_kernel --pack vmlinux.kpart --keyblock /usr/share/vboot/devkeys/kernel.keyblock --signprivate /usr/share/vboot/devkeys/kernel_data_key.vbprivk --version 1 --config cmdline --bootloader bootloader.bin --vmlinuz kernel.itb --arch arm
cp -v vmlinux.kpart "/boot/vmlinux.kpart-initrd-${kver}" || out_of_memory

#cleanning up
rm -f Image Image.lzma initrd.img.xz bootloader.bin kernel.itb vmlinux.kpart


#final output

#printing results
echo image put inside /boot/vmlinux.kpart-initrd-${kver}
echo ""
echo "for single boot only testing:"
echo ""
echo "  vttest $kver"
echo ""
echo "to always boot this kernel after successful testing:"
echo ""
echo "  vtflash $kver"
echo ""

#returns to previous directory
restor_pwd